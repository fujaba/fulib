// --------------- Plugins ---------------

buildscript {
   // unfortunately we need to use the legacy buildscript block
   // because the plugins {} DSL does not work when the plugin is compiled with a newer Java version
   // (in this case, javafx-plugin is compiled against 11, while we want the build to work in 8)

   repositories {
      maven {
         url 'https://plugins.gradle.org/m2/'
      }
   }
   dependencies {
      classpath 'org.openjfx:javafx-plugin:0.0.9'
   }
}

plugins {
   id 'java-library'
   id 'antlr'
   id 'maven-publish'
   id 'signing'
   // https://plugins.gradle.org/plugin/com.palantir.revapi
   id 'com.palantir.revapi' version '1.5.0'
   // https://plugins.gradle.org/plugin/org.fulib.fulibGradle
   id 'org.fulib.fulibGradle' version '0.5.0'
   // https://plugins.gradle.org/plugin/io.github.gradle-nexus.publish-plugin
   id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

if (JavaVersion.current().java11Compatible) {
   apply plugin: 'org.openjfx.javafxplugin'
}

// --------------- General Settings ---------------

group = 'org.fulib'
version = 'git describe --tags'.execute([], rootDir).text[1..-2] // strip v and \n
description = 'Fulib is a Java-code generating library.'

// --------------- Dependencies ---------------

repositories {
   mavenLocal()
   mavenCentral()
}

nexusPublishing.repositories.sonatype()

java {
   withJavadocJar()
   withSourcesJar()
}

publishing.publications.create('mavenJava', MavenPublication) {
   it.from(components.java)
   it.pom {
      name = project.name
      description = project.description
      url = 'https://github.com/fujaba/fulib'
      inceptionYear = '2018'

      scm {
         url = 'https://github.com/fujaba/fulib'
      }

      licenses {
         license {
            name = 'MIT License'
            url = 'https://www.opensource.org/licenses/mit-license.php'
         }
      }

      developers {
         developer {
            id = 'zuendorf'
            name = 'Albert Zuendorf'
         }
         developer {
            id = 'digitalhoax'
            name = 'Tobias George'
         }
         developer {
            id = 'eicke123'
            name = 'Christoph Eickhoff'
         }
         developer {
            id = 'Clashsoft'
            name = 'Adrian Kunz'
         }
      }
   }
}

signing.sign publishing.publications.mavenJava

dependencies {
   // https://mvnrepository.com/artifact/org.fulib/fulibScenarios
   fulibScenarios group: 'org.fulib', name: 'fulibScenarios', version: '1.7.0'

   // https://mvnrepository.com/artifact/org.antlr/antlr4
   antlr group: 'org.antlr', name: 'antlr4', version: '4.9.3'

   // https://mvnrepository.com/artifact/org.fulib/fulibYaml
   api group: 'org.fulib', name: 'fulibYaml', version: '1.5.0'

   // https://mvnrepository.com/artifact/org.antlr/ST4
   implementation group: 'org.antlr', name: 'ST4', version: '4.3.1'

   // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
   implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.9.3'

   // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-library
   testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'

   // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
   testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'

   // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
   testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.1'

   // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
   testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'

   genImplementation sourceSets.main.output + sourceSets.main.runtimeClasspath

   // https://mvnrepository.com/artifact/org.fulib/fulibTools
   genImplementation group: 'org.fulib', name: 'fulibTools', version: '1.5.1'
}

if (JavaVersion.current().java11Compatible) {
   javafx {
      modules 'javafx.base'
      configuration = 'testImplementation'
   }
}

// --------------- Misc. Settings ---------------

// Workaround for a circular dependency error.
// Now the task needs to be run manually.
compileJava.dependsOn = compileJava.dependsOn - 'generateScenarioSource'

generateScenarioSource.enabled = false
tasks.register('genModel', JavaExec) {
   generateScenarioSource.copyTo(it)
}

test {
   useJUnitPlatform()
   testLogging.showStandardStreams = true

   workingDir = temporaryDir
   outputs.dir workingDir

   doFirst {
      workingDir.mkdirs()
   }
}

revapi {
   oldVersion = '1.6.0'
}

// --------------- ANTLR ---------------

def generatedANTLRDir = "$buildDir/generated/sources/antlr/main/"

sourceSets.main.java.srcDir(generatedANTLRDir)

// https://stackoverflow.com/questions/40995727/gradle-cant-find-antlr-token-file
generateGrammarSource {
   def packageName = 'org.fulib.parser'
   arguments += [ '-package', packageName ]
   outputDirectory = file("$generatedANTLRDir/${ packageName.replace('.', '/') }/")
}

// https://github.com/gradle/gradle/issues/820
configurations.api {
   extendsFrom = extendsFrom.findAll { it != configurations.antlr }
}
