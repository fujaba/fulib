import "java.dicts.stg"

collectionImpl(role, other) ::= <%
<role.collectionType.simpleImplName>
<if(role.collectionType.generic)>\<><endif>
%>

collectionItf(role, other) ::= <%
<role.collectionType.itf.simpleName>\<<other.clazz.name>>
%>

// --------------- Declarations ---------------

roleSignatures(role, other) ::= <<
   propertyDecl:           class/<role.clazz.name>/attribute/PROPERTY_<role.name>
   roleAttrDecl:           class/<role.clazz.name>/attribute/<role.name>
   getMethod:              class/<role.clazz.name>/method/get<role.name; format="cap">()
   <if(javaFX.(role.propertyStyle))>
      initMethod:          class/<role.clazz.name>/method/_init<role.name; format="cap">()
      <if(!role.toMany)>
         propertyMethod:   class/<role.clazz.name>/method/<role.name>Property()
      <endif>
   <endif>
   <if(role.toMany)>
      withItem:            class/<role.clazz.name>/method/with<role.name; format="cap">(<other.clazz.name>)
      withArray:           class/<role.clazz.name>/method/with<role.name; format="cap">(<other.clazz.name>...)
      withColl:            class/<role.clazz.name>/method/with<role.name; format="cap">(Collection\<? extends <other.clazz.name>\>)
      withoutItem:         class/<role.clazz.name>/method/without<role.name; format="cap">(<other.clazz.name>)
      withoutArray:        class/<role.clazz.name>/method/without<role.name; format="cap">(<other.clazz.name>...)
      withoutColl:         class/<role.clazz.name>/method/without<role.name; format="cap">(Collection\<? extends <other.clazz.name>\>)
      setAllArray:         class/<role.clazz.name>/method/set<role.name; format="cap">(<other.clazz.name>...)
      setAllColl:          class/<role.clazz.name>/method/set<role.name; format="cap">(Collection\<? extends <other.clazz.name>\>)
   <else>
      setMethod:           class/<role.clazz.name>/method/set<role.name; format="cap">(<other.clazz.name>)
   <endif>
>>

roleAttrDecl(role, other) ::= <<
<if(role.toMany)>
   private <collectionItf(role, other)> <role.name>;
<else>
   private <other.clazz.name> <role.name>;
<endif>
>>

propertyDecl(role, other) ::= <<
   public static final String PROPERTY_<role.name> = "<role.name>";
>>

// --------------- Simple Accessors ---------------

getMethod(role, other) ::= <<
<if(role.toMany)>
   public <collectionItf(role, other)> get<role.name; format="cap">()
   {
      return this.<role.name> != null ? import(java.util.Collections).unmodifiable<role.collectionType.itf.simpleName>(this.<role.name>) : import(java.util.Collections).empty<role.collectionType.itf.simpleName>();
   }
<else>
   public <other.clazz.name> get<role.name; format="cap">()
   {
      return this.<role.name>;
   }
<endif>
>>

setMethod(role, other) ::= <<
   public <role.clazz.name> set<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> == value)
      {
         return this;
      }

      final <other.clazz.name> oldValue = this.<role.name>;
<if(other.name)>
      if (this.<role.name> != null)
      {
         this.<role.name> = null;
         oldValue.<withoutThis(other)>;
      }
<endif>
      this.<role.name> = value;
<if(other.name)>
      if (value != null)
      {
         value.<withThis(other)>;
      }
<endif>
      return this;
   }
>>

// --------------- With ---------------

withItem(role, other) ::= <<
   public <role.clazz.name> with<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> == null)
      {
         this.<role.name> = new <collectionImpl(role, other)>();
      }
      if (!this.<role.name>.contains(value))
      {
         this.<role.name>.add(value);
<if(other.name)>
         value.<withThis(other)>;
<endif>
      }
      return this;
   }
>>

withArray(role, other) ::= <<
   public <role.clazz.name> with<role.name; format="cap">(<other.clazz.name>... value)
   {
      for (final <other.clazz.name> item : value)
      {
         this.with<role.name; format="cap">(item);
      }
      return this;
   }
>>

withColl(role, other) ::= <<
   public <role.clazz.name> with<role.name; format="cap">(import(java.util.Collection)\<? extends <other.clazz.name>\> value)
   {
      for (final <other.clazz.name> item : value)
      {
         this.with<role.name; format="cap">(item);
      }
      return this;
   }
>>

// --------------- Without ---------------

withoutItem(role, other) ::= <<
   public <role.clazz.name> without<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> != null && this.<role.name>.remove(value))
      {
<if(other.name)>
         value.<withoutThis(other)>;
<endif>
      }
      return this;
   }
>>

withoutArray(role, other) ::= <<
   public <role.clazz.name> without<role.name; format="cap">(<other.clazz.name>... value)
   {
      for (final <other.clazz.name> item : value)
      {
         this.without<role.name; format="cap">(item);
      }
      return this;
   }
>>

withoutColl(role, other) ::= <<
   public <role.clazz.name> without<role.name; format="cap">(import(java.util.Collection)\<? extends <other.clazz.name>\> value)
   {
      for (final <other.clazz.name> item : value)
      {
         this.without<role.name; format="cap">(item);
      }
      return this;
   }
>>

setAllArray(role, other) ::= <<
   public <role.clazz.name> set<role.name; format="cap">(<other.clazz.name>... value)
   {
      return this.set<role.name; format="cap">(import(java.util.Arrays).asList(value));
   }
>>

setAllColl(role, other) ::= <<
   public <role.clazz.name> set<role.name; format="cap">(import(java.util.Collection)\<? extends <other.clazz.name>\> value)
   {
      if (this.<role.name> == null)
      {
         this.<role.name> = new <collectionImpl(role, other)>(value);
      }
      else
      {
         this.<role.name>.clear();
         this.<role.name>.addAll(value);
      }
      return this;
   }
>>

// --------------- Helpers ---------------

withoutThis(other) ::= <%
<if(other.toMany)>
   without<other.name; format="cap">(this)
<else>
   set<other.name; format="cap">(null)
<endif>
%>

withThis(other) ::= <%
<if(other.toMany)>
   with<other.name; format="cap">(this)
<else>
   set<other.name; format="cap">(this)
<endif>
%>
