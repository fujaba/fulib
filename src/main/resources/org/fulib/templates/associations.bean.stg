import "associations.pojo.stg"

// --------------- Simple Accessors ---------------

setMethod(role, other) ::= <<
<if(role.description)>
   <setterJavaDoc(role)>
<endif>
   public <role.clazz.name> set<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> == value)
      {
         return this;
      }

      final <other.clazz.name> oldValue = this.<role.name>;
<if(other.name)>
      if (this.<role.name> != null)
      {
         this.<role.name> = null;
         oldValue.<withoutThis(other)>;
      }
<endif>
      this.<role.name> = value;
<if(other.name)>
      if (value != null)
      {
         value.<withThis(other)>;
      }
<endif>
      this.firePropertyChange(PROPERTY_<role.name>, oldValue, value);
      return this;
   }
>>

// --------------- With ---------------

withItem(role, other) ::= <<
<if(role.description)>
   <setterJavaDoc(role)>
<endif>
   public <role.clazz.name> with<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> == null)
      {
         this.<role.name> = new <collectionImpl(role, other)>();
      }
      if (!this.<role.name>.contains(value))
      {
         this.<role.name>.add(value);
<if(other.name)>
         value.<withThis(other)>;
<endif>
         this.firePropertyChange(PROPERTY_<role.name>, null, value);
      }
      return this;
   }
>>

// --------------- Without ---------------

withoutItem(role, other) ::= <<
<if(role.description)>
   <setterJavaDoc(role)>
<endif>
   public <role.clazz.name> without<role.name; format="cap">(<other.clazz.name> value)
   {
      if (this.<role.name> != null && this.<role.name>.remove(value))
      {
<if(other.name)>
         value.<withoutThis(other)>;
<endif>
         this.firePropertyChange(PROPERTY_<role.name>, value, null);
      }
      return this;
   }
>>

setAllColl(role, other) ::= <<
   public <role.clazz.name> set<role.name; format="cap">(import(java.util.Collection)\<? extends <other.clazz.name>\> value)
   {
      if (this.<role.name> == null)
      {
         this.<role.name> = new <collectionImpl(role, other)>();
      }

      if (value.equals(this.<role.name>))
      {
         return this;
      }

      for (final <other.clazz.name> oldItem : this.<role.name>)
      {
         if (!value.contains(oldItem))
         {
<if(other.name)>
            oldItem.<withoutThis(other)>;
<endif>
            this.firePropertyChange(PROPERTY_<role.name>, oldItem, null);
         }
      }

      for (final <other.clazz.name> newItem : value)
      {
         if (!this.<role.name>.contains(newItem))
         {
<if(other.name)>
            newItem.<withThis(other)>;
<endif>
            this.firePropertyChange(PROPERTY_<role.name>, null, newItem);
         }
      }

      this.<role.name>.clear();
      this.<role.name>.addAll(value);
      return this;
   }
>>
