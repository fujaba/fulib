import "java.dicts.stg"

collectionImpl(attr) ::= <%
<attr.collectionType.simpleImplName>
<if(attr.collectionType.generic)>\<><endif>
%>

box(attr) ::= <%
<boxMap.(attr.type)>
%>

collectionItf(attr) ::= <%
<attr.collectionType.itf.simpleName>\<<box(attr)>>
%>

// --------------- Declarations ---------------

attrSignatures(attr) ::= <<
   propertyDecl:     class/<attr.clazz.name>/attribute/PROPERTY_<attr.name>
   attrDecl:         class/<attr.clazz.name>/attribute/<attr.name>
   attrGet:          class/<attr.clazz.name>/method/get<attr.name; format="cap">()
   <if(javaFX.(attr.propertyStyle))>
   initMethod:       class/<attr.clazz.name>/method/_init<attr.name; format="cap">()
   propertyGet:      class/<attr.clazz.name>/method/<attr.name>Property()
   <endif>
   <if(attr.collection)>
   attrWithItem:     class/<attr.clazz.name>/method/with<attr.name; format="cap">(<box(attr)>)
   attrWithArray:    class/<attr.clazz.name>/method/with<attr.name; format="cap">(<box(attr)>...)
   attrWithColl:     class/<attr.clazz.name>/method/with<attr.name; format="cap">(Collection\<? extends <box(attr)>\>)
   attrWithoutItem:  class/<attr.clazz.name>/method/without<attr.name; format="cap">(<box(attr)>)
   attrWithoutArray: class/<attr.clazz.name>/method/without<attr.name; format="cap">(<box(attr)>...)
   attrWithoutColl:  class/<attr.clazz.name>/method/without<attr.name; format="cap">(Collection\<? extends <box(attr)>\>)
   attrSetAllArray:  class/<attr.clazz.name>/method/set<attr.name; format="cap">(<box(attr)>...)
   attrSetAllColl:   class/<attr.clazz.name>/method/set<attr.name; format="cap">(Collection\<? extends <box(attr)>\>)
   <else>
   attrSet:          class/<attr.clazz.name>/method/set<attr.name; format="cap">(<attr.type>)
   <endif>
>>

attrDecl(attr) ::= <<
<if(attr.collection)>
   private <collectionItf(attr)> <attr.name><if(attr.initialization)> = <attr.initialization><endif>;
<else>
   private <attr.type> <attr.name><if(attr.initialization)> = <attr.initialization><endif>;
<endif>
>>

propertyDecl(attr) ::= <<
   public static final String PROPERTY_<attr.name> = "<attr.name>";
>>

// --------------- Simple Accessors ---------------

attrGet(attr) ::= <<
<if(attr.collection)>
   public <collectionItf(attr)> get<attr.name; format="cap">()
   {
      return this.<attr.name> != null ? import(java.util.Collections).unmodifiable<attr.collectionType.itf.simpleName>(this.<attr.name>) : import(java.util.Collections).empty<attr.collectionType.itf.simpleName>();
   }
<else>
   public <attr.type> get<attr.name; format="cap">()
   {
      return this.<attr.name>;
   }
<endif>
>>

attrSet(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(<attr.type> value)
   {
      this.<attr.name> = value;
      return this;
   }
>>

// --------------- With ---------------

attrWithItem(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(<box(attr)> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>();
      }
      this.<attr.name>.add(value);
      return this;
   }
>>

attrWithArray(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(<box(attr)>... value)
   {
      this.with<attr.name; format="cap">(import(java.util.Arrays).asList(value));
      return this;
   }
>>

attrWithColl(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(import(java.util.Collection)\<? extends <box(attr)>\> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>(value);
      }
      else
      {
         this.<attr.name>.addAll(value);
      }
      return this;
   }
>>

// --------------- Without ---------------

attrWithoutItem(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(<box(attr)> value)
   {
      this.<attr.name>.removeAll(import(java.util.Collections).singleton(value));
      return this;
   }
>>

attrWithoutArray(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(<box(attr)>... value)
   {
      this.without<attr.name; format="cap">(import(java.util.Arrays).asList(value));
      return this;
   }
>>

attrWithoutColl(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(import(java.util.Collection)\<? extends <box(attr)>\> value)
   {
      if (this.<attr.name> != null)
      {
         this.<attr.name>.removeAll(value);
      }
      return this;
   }
>>

// --------------- Set All ---------------

attrSetAllArray(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(<box(attr)>... value)
   {
      return this.set<attr.name; format="cap">(import(java.util.Arrays).asList(value));
   }
>>

attrSetAllColl(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(import(java.util.Collection)\<? extends <box(attr)>\> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>(value);
      }
      else
      {
         this.<attr.name>.clear();
         this.<attr.name>.addAll(value);
      }
      return this;
   }
>>
