tableSignatures(clazz) ::= <<
   constructor:   class/<clazz.name>Table/constructor/<clazz.name>Table(<clazz.name>...)
   selectColumns: class/<clazz.name>Table/method/selectColumns(String...)
   dropColumns:   class/<clazz.name>Table/method/dropColumns(String...)
   addColumn:     class/<clazz.name>Table/method/addColumn(String,Function\<? super Map\<String,Object>,?>)
   <if(!clazz.superClass)>
      filter:     class/<clazz.name>Table/method/filter(Predicate\<? super <clazz.name>\>)
   <endif>
   filterRow:     class/<clazz.name>Table/method/filterRow(Predicate\<? super Map\<String,Object>\>)
   <if(!clazz.superClass)>
      toSet:      class/<clazz.name>Table/method/toSet()
   <endif>
   tableToString: class/<clazz.name>Table/method/toString()
>>

constructor(clazz) ::= <<
   public <clazz.name>Table(<clazz.name>... start)
   {
      this.setColumnName("<clazz.name>");
      this.columnMap.put("<clazz.name>", 0);
      for (<clazz.name> current : start)
      {
         List\<Object> row = new ArrayList\<>();
         row.add(current);
         this.table.add(row);
      }
   }
>>

selectColumns(clazz) ::= <<
   public <clazz.name>Table selectColumns(String... columnNames)
   {
      Map\<String, Integer> oldColumnMap = new LinkedHashMap\<>(this.columnMap);
      this.columnMap.clear();

      for (int i = 0; i \< columnNames.length; i++)
      {
         String name = columnNames[i];
         if (oldColumnMap.get(name) == null)
         {
            throw new IllegalArgumentException("unknown column name: " + name);
         }
         this.columnMap.put(name, i);
      }

      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();

      Set\<List\<Object>\> rowSet = new HashSet\<>();
      for (List\<Object> row : oldTable)
      {
         List\<Object> newRow = new ArrayList\<>();
         for (String name : columnNames)
         {
            Object value = row.get(oldColumnMap.get(name));
            newRow.add(value);
         }
         if (rowSet.add(newRow))
         {
            this.table.add(newRow);
         }
      }

      return this;
   }
>>

dropColumns(clazz) ::= <<
   public <clazz.name>Table dropColumns(String... columnNames)
   {
      Map\<String, Integer> oldColumnMap = new LinkedHashMap\<>(this.columnMap);
      this.columnMap.clear();

      Set\<String> dropNames = new HashSet\<>(Arrays.asList(columnNames));
      int i = 0;
      for (String name : oldColumnMap.keySet())
      {
         if (!dropNames.contains(name))
         {
            this.columnMap.put(name, i);
            i++;
         }
      }

      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();

      Set\<List\<Object>\> rowSet = new HashSet\<>();
      for (List\<Object> row : oldTable)
      {
         List\<Object> newRow = new ArrayList\<>();
         for (String name : this.columnMap.keySet())
         {
            Object value = row.get(oldColumnMap.get(name));
            newRow.add(value);
         }
         if (rowSet.add(newRow))
         {
            this.table.add(newRow);
         }
      }

      return this;
   }
>>

addColumn(clazz) ::= <<
   public void addColumn(String columnName, Function\<? super Map\<String, Object>, ?> function)
   {
      int newColumnNumber = this.table.isEmpty() ? 0 : this.table.get(0).size();
      for (List\<Object> row : this.table)
      {
         Map\<String, Object> map = new LinkedHashMap\<>();
         for (Map.Entry\<String, Integer> entry : this.columnMap.entrySet())
         {
            map.put(entry.getKey(), row.get(entry.getValue()));
         }
         Object result = function.apply(map);
         row.add(result);
      }
      this.columnMap.put(columnName, newColumnNumber);
   }
>>

filter(clazz) ::= <<
   public <clazz.name>Table filter(Predicate\<? super <clazz.name>\> predicate)
   {
      int column = this.getColumn();
      this.table.removeIf(row -> {
         <clazz.name> start = (<clazz.name>) row.get(column);
         return !predicate.test(start);
      });
      return this;
   }
>>

filterRow(clazz) ::= <<
   public <clazz.name>Table filterRow(Predicate\<? super Map\<String, Object>\> predicate)
   {
      this.table.removeIf(row -> {
         Map\<String, Object> map = new LinkedHashMap\<>();
         for (Map.Entry\<String, Integer> entry : this.columnMap.entrySet())
         {
            map.put(entry.getKey(), row.get(entry.getValue()));
         }
         return !predicate.test(map);
      });
      return this;
   }
>>

toSet(clazz) ::= <<
   public Set\<<clazz.name>\> toSet()
   {
      int column = this.getColumn();
      Set\<<clazz.name>\> result = new LinkedHashSet\<>(this.table.size());
      for (List\<?> row : this.table)
      {
         <clazz.name> value = (<clazz.name>) row.get(column);
         result.add(value);
      }
      return result;
   }
>>

tableToString(clazz) ::= <<
   public String toString()
   {
      StringBuilder buf = new StringBuilder();
      for (String key : this.columnMap.keySet())
      {
         buf.append("| ").append(key).append(" \t");
      }
      buf.append("|\n");

      for (String ignored : this.columnMap.keySet())
      {
         buf.append("| --- ");
      }
      buf.append("|\n");

      for (List\<?> row : this.table)
      {
         for (Object cell : row)
         {
            buf.append("| ").append(cell).append(" \t");
         }
         buf.append("|\n");
      }
      return buf.toString();
   }
>>
